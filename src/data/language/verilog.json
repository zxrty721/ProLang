{
  "id": 51,
  "name": "Verilog",
  "slug": "verilog",
  "logo": "img/verilog.png",
  "desc": "Verilog เป็นภาษา Hardware Description Language (HDL) ที่ใช้ในการออกแบบ, ตรวจสอบ และสร้างวงจรอิเล็กทรอนิกส์ดิจิทัล ตั้งแต่ระดับ Gate ไปจนถึงระดับ System-on-Chip (SoC) เป็นภาษาหลักในการออกแบบชิป (ASIC) และโปรแกรม FPGA",
  "by": "Gateway Design Automation",
  "yr": "1984",
  "level": "1",
  "par": ["Declarative", "Concurrent", "Structured"],
  "fields": ["Embedded", "Hardware", "Digital", "Aero"],
  "rank": "Top 2 HDL (ร่วมกับ VHDL)",
  "salary_range": "฿45,000-80,000 บาท/เดือน (Junior), ฿80,000-150,000 บาท/เดือน (Senior)",
  "salary": ["high", "veryhigh"],
  "pros": [
    "ใช้ในการออกแบบ Hardware โดยตรง",
    "รองรับการจำลอง (Simulation) พฤติกรรมวงจร",
    "สามารถสังเคราะห์ (Synthesis) เป็น Gate Level ได้",
    "อธิบายการทำงานแบบขนานของ Hardware ได้ดี",
    "มีเครื่องมือและ Ecosystem ที่เป็นมาตรฐานอุตสาหกรรม"
  ],
  "cons": [
    "เฉพาะทางสูง (ไม่เหมาะกับการเขียน Software ทั่วไป)",
    "Learning Curve สูงสำหรับผู้ที่ไม่มีพื้นฐาน Digital Logic/Electronics",
    "การดีบักซับซ้อนและต้องใช้เครื่องมือเฉพาะ",
    "ไวยากรณ์อาจดูเข้าใจยากสำหรับผู้เริ่มต้น",
    "เวลาในการสังเคราะห์และรันบน Hardware อาจนาน"
  ],
  "frameworks": ["None (เป็นภาษาพื้นฐาน)", "EDA Tools (Cadence, Synopsys, Mentor Graphics)"],
  "learn": ["Verilog HDL: A Guide to Digital Design and Synthesis (book)", "FPGA4Fun", "Verilog Quick Reference Guide", "VLSI Design Course Materials"],
  "variables": {
    "declaration (การประกาศ)": [
      "wire a; // ประกาศ wire (ใช้เชื่อมต่อวงจร)",
      "reg q; // ประกาศ reg (ใช้เก็บค่าใน Sequential Logic)",
      "input clk; // ประกาศ input port ของ Module",
      "output data_out; // ประกาศ output port ของ Module",
      "parameter WIDTH = 8; // ประกาศ Parameter (ค่าคงที่สำหรับปรับแต่ง Module)"
    ],
    "types (ประเภท)": [
      "wire // ใช้สำหรับเชื่อมต่อ Element (ไม่มีสถานะเก็บค่า)",
      "reg // ใช้สำหรับเก็บค่าใน Sequential Logic (FF, Latch)",
      "integer // จำนวนเต็ม (สำหรับใช้ใน Behavioral Block)",
      "real // ทศนิยม (สำหรับใช้ใน Behavioral Block, Simulation Only)",
      "time // เวลา (สำหรับ Simulation Only)",
      "parameter // ค่าคงที่ที่สามารถกำหนดค่าได้ตอน Instantiation"
    ],
    "examples (ตัวอย่าง)": [
      "module my_module (input clk, input reset, output reg q); // การประกาศ Module (บล็อกของ Hardware)",
      "wire data_in; // การประกาศ wire สำหรับรับข้อมูล",
      "reg [7:0] counter; // การประกาศ reg ขนาด 8 บิต",
      "parameter SIZE = 16; // การประกาศ Parameter SIZE มีค่าเป็น 16"
    ]
  },
  "functions": {
    "declaration (การออกแบบ Hardware)": [
      "module Module_Name (port_list); // การประกาศ Module",
      "assign output = input_a & input_b; // การกำหนดค่าแบบ Combinational (Continuous Assignment)",
      "always @(posedge clk or negedge reset) begin // Always Block สำหรับ Sequential/Combinational Logic",
      "initial begin // Initial Block (สำหรับ Simulation Initialization)"
    ],
    "examples (ตัวอย่าง)": [
      "// Module: Half Adder (วงจรบวกครึ่งหนึ่ง)\nmodule half_adder (input a, input b, output sum, output carry);\n  assign sum = a ^ b; // XOR gate\n  assign carry = a & b; // AND gate\nendmodule\n",
      "// Module: D Flip-Flop\nmodule d_flip_flop (input clk, input d, output reg q);\n  always @(posedge clk) begin // เมื่อ clock ขอบขาขึ้น\n    q <= d; // assign ค่า d ไปยัง q (Non-blocking assignment)\n  end\nendmodule\n",
      "// Behavioral Block: Counter\nmodule counter_8bit (\n  input clk,\n  input reset,\n  output reg [7:0] count_out\n);\n  always @(posedge clk or posedge reset) begin\n    if (reset) begin // ถ้า reset เป็น High (Synchronous Reset)\n      count_out <= 8'b0; // Reset counter เป็น 0\n    end else begin\n      count_out <= count_out + 1; // นับเพิ่มทีละ 1\n    end\n  end\nendmodule\n",
      "// Initial Block (สำหรับการจำลอง Simulation)\nmodule testbench;\n  reg clk, reset;\n  wire [7:0] my_count;\n\n  counter_8bit my_counter_instance (\n    .clk(clk),\n    .reset(reset),\n    .count_out(my_count)\n  );\n\n  initial begin // เริ่มต้นการจำลอง\n    clk = 0;\n    reset = 1; #10 reset = 0; // หน่วงเวลา 10 units แล้ว reset เป็น 0\n  end\n\n  always #5 clk = ~clk; // สร้างสัญญาณ clock ทุกๆ 5 units (ความถี่ 10 units)\n\n  initial begin // หยุดการจำลอง\n    #100 $finish; // หลังจาก 100 units ให้หยุดการจำลอง\n  end\nendmodule\n"
    ],
    "built_in (ในตัว)": [
      "& (AND Gate) // ตัวดำเนินการ AND ระดับ Bit",
      "| (OR Gate) // ตัวดำเนินการ OR ระดับ Bit",
      "^ (XOR Gate) // ตัวดำเนินการ XOR ระดับ Bit",
      "~ (NOT Gate) // ตัวดำเนินการ NOT ระดับ Bit",
      "assign // ใช้กำหนดค่าแบบ Combinational Logic",
      "always // ใช้กำหนด Behavioral Block (Sequential/Combinational)",
      "initial // ใช้กำหนด Initial Block (สำหรับการจำลอง)",
      "$display // ใช้แสดงผลข้อความและค่าตัวแปรใน Simulation Console",
      "$monitor // ใช้แสดงผลค่าตัวแปรเมื่อมีการเปลี่ยนแปลงใน Simulation Console",
      "$finish // ใช้หยุด Simulation",
      "$time // ฟังก์ชันสำหรับเรียกดูเวลาใน Simulation"
    ]
  },
  "syntax": {
    "comments (คอมเมนต์)": [
      "// Single-line comment // คอมเมนต์บรรทัดเดียว",
      "/* Multi-line comment */ // คอมเมนต์หลายบรรทัด"
    ],
    "conditions (เงื่อนไข)": [
      "if (condition) begin /* ... */ end else if (condition) begin /* ... */ end else begin /* ... */ end // คำสั่ง if-else if-else (ใน Behavioral Block)",
      "case (expression) case_value: /* ... */ default: /* ... */ endcase // คำสั่ง case (ใน Behavioral Block)"
    ],
    "loops (การวนซ้ำ)": [
      "for (i = 0; i < 5; i = i + 1) begin /* ... */ end // ลูป for (ใน Behavioral Block)",
      "while (condition) begin /* ... */ end // ลูป while (ใน Behavioral Block)",
      "repeat (N) begin /* ... */ end // ลูป repeat (วนซ้ำ N ครั้ง)",
      "forever begin /* ... */ end // ลูปไม่รู้จบ (สำหรับสร้าง Clock/Reset ใน Testbench)"
    ],
    "operators (ตัวดำเนินการ)": [
      "Arithmetic: +, -, *, /, % // ตัวดำเนินการทางคณิตศาสตร์",
      "Logical: && (AND), || (OR), ! (NOT) // ตัวดำเนินการตรรกะ",
      "Bitwise: & (AND), | (OR), ^ (XOR), ~ (NOT) // ตัวดำเนินการระดับบิต",
      "Reduction: & (Reduction AND), | (Reduction OR), ^ (Reduction XOR) // ตัวดำเนินการลดบิต (Reduction)",
      "Shift: << (Left Shift), >> (Right Shift) // ตัวดำเนินการ Shift",
      "Concatenation: {a, b} // ตัวดำเนินการเชื่อมต่อบิต/เวกเตอร์",
      "Replication: {N{a}} // ตัวดำเนินการทำซ้ำบิต/เวกเตอร์ N ครั้ง",
      "Blocking Assignment: = // การกำหนดค่าแบบ Blocking (Sequential Execution)",
      "Non-blocking Assignment: <= // การกำหนดค่าแบบ Non-blocking (Concurrent Execution, ใช้สำหรับ Sequential Logic)"
    ],
    "examples (ตัวอย่าง)": [
      "// ตัวอย่างที่ 1: การใช้เงื่อนไข (if-else) ใน Combinational Logic (always @*)\nmodule mux2to1 (input a, b, sel, output reg out);\n  always @* begin // always @* หมายถึงเมื่อ input ใดๆ เปลี่ยนแปลง\n    if (sel == 1) begin\n      out = a;\n    end else begin\n      out = b;\n    end\n  end\nendmodule\n",
      "// ตัวอย่างที่ 2: การใช้วงลูป For ใน Behavioral Block (Simulation)\nmodule loop_example;\n  integer i;\n  initial begin\n    for (i = 0; i < 3; i = i + 1) begin\n      $display(\"Loop Verilog: %d\", i);\n    end\n    $finish;\n  end\nendmodule\n",
      "// ตัวอย่างที่ 3: การใช้ Case Statement ใน Behavioral Block\nmodule decoder (input [1:0] sel, output reg [3:0] out);\n  always @* begin\n    case (sel)\n      2'b00: out = 4'b0001;\n      2'b01: out = 4'b0010;\n      2'b10: out = 4'b0100;\n      2'b11: out = 4'b1000;\n      default: out = 4'bxxxx; // Unknown or don't care\n    endcase\n  end\nendmodule\n",
      "// ตัวอย่างที่ 4: การใช้งาน Bitwise และ Reduction Operators\nmodule bit_ops (input [3:0] data, output wire all_ones, output wire any_one);\n  assign all_ones = &data; // Reduction AND (เป็น 1 ถ้าทุกบิตเป็น 1)\n  assign any_one = |data; // Reduction OR (เป็น 1 ถ้ามีบิตใดบิตหนึ่งเป็น 1)\nendmodule\n",
      "// ตัวอย่างที่ 5: การใช้งาน Concatenation และ Replication Operators\nmodule concat_repl (input [1:0] a, input [2:0] b, output wire [4:0] c, output wire [5:0] d);\n  assign c = {a, b}; // Concatenation: c จะเป็น 5 บิต (a[1:0]b[2:0])\n  assign d = {{3{a[0]}}, {3{b[2]}}}; // Replication: d จะเป็น 6 บิต (a[0] 3 ครั้ง, b[2] 3 ครั้ง)\nendmodule\n"
    ]
  }
}
