{
  "id": 58,
  "name": "HLSL",
  "slug": "hlsl",
  "logo": "img/hlsl.svg",
  "desc": "HLSL (High-Level Shading Language) เป็นภาษาโปรแกรมสำหรับ Shaders ที่พัฒนาโดย Microsoft ใช้สำหรับโปรแกรมมิ่งหน่วยประมวลผลกราฟิก (GPU) ใน Pipeline การแสดงผลกราฟิกแบบเรียลไทม์ (Real-time Graphics Rendering) บนแพลตฟอร์ม Microsoft DirectX มีความสามารถในการควบคุมการ Render ภาพ 3D ได้อย่างละเอียด ตั้งแต่การคำนวณตำแหน่ง Vertex ไปจนถึงการคำนวณสีของ Pixel",
  "by": "Microsoft",
  "yr": "2002",
  "level": "2",
  "par": ["Procedural", "Imperative", "Concurrent (implicitly)"],
  "fields": ["Game", "Graphics", "Scientific", "Render", "VR"],
  "rank": "เป็นมาตรฐานสำหรับ Real-time Graphics Rendering บน Windows/Xbox (ร่วมกับ GLSL)",
  "salary_range": "฿40,000-75,000 บาท/เดือน (Junior), ฿75,000-140,000 บาท/เดือน (Senior)",
  "salary": ["high", "veryhigh"],
  "pros": [
    "ควบคุม GPU ได้โดยตรงเพื่อประสิทธิภาพสูงสุดในการ Render กราฟิกบน DirectX",
    "บูรณาการเข้ากับ Ecosystem ของ Microsoft (DirectX, Visual Studio)",
    "สามารถสร้าง Visual Effect ที่ซับซ้อนและสวยงามได้",
    "ประมวลผลแบบขนานบน GPU ได้อย่างมีประสิทธิภาพ",
    "ไวยากรณ์คล้าย C/C++ ทำให้เรียนรู้ได้ง่ายสำหรับผู้ที่มีพื้นฐาน"
  ],
  "cons": [
    "ผูกติดกับแพลตฟอร์ม Microsoft DirectX (ไม่สามารถใช้กับ OpenGL/Vulkan โดยตรง)",
    "ต้องมีความเข้าใจในหลักการกราฟิก 3D และ Linear Algebra",
    "การดีบัก Shader ค่อนข้างยากและต้องใช้เครื่องมือเฉพาะ",
    "ทำงานกับ Hardware โดยตรง การจัดการ Memory และ Resource ต้องทำด้วยตนเอง",
    "ไม่เหมาะกับการเขียนโปรแกรมทั่วไป"
  ],
  "frameworks": ["DirectX (Graphics API)", "Direct3D"],
  "learn": ["Microsoft DirectX Documentation", "DirectX-Graphics-Samples", "GameDev.net (HLSL Tutorials)", "Shader Playground"],
  "variables": {
    "declaration (การประกาศ)": [
      "struct VertexInput { float3 position : POSITION; float3 normal : NORMAL; }; // การประกาศ Struct สำหรับ Input/Output",
      "float4 outputColor : SV_Target; // Output variable สำหรับ Fragment (Pixel) Shader",
      "cbuffer PerFrame { float4x4 ViewProjection; }; // Uniform variable (ค่าคงที่ที่กำหนดจาก CPU)"
    ],
    "types (ประเภท)": [
      "float, float2, float3, float4 // ทศนิยม (1, 2, 3, 4 องค์ประกอบ)",
      "half, half2, half3, half4 // ทศนิยมความแม่นยำต่ำ (สำหรับประสิทธิภาพ)",
      "minfloat, minhalf, minint // ทศนิยม/จำนวนเต็มความแม่นยำต่ำสุด",
      "int, int2, int3, int4 // จำนวนเต็ม",
      "uint, uint2, uint3, uint4 // จำนวนเต็มบวก",
      "bool, bool2, bool3, bool4 // ค่าตรรกะ (true/false)",
      "matrix (float2x2, float3x3, float4x4) // Matrix ของ float (2x2, 3x3, 4x4)",
      "sampler, SamplerState // Sampler สำหรับ Texture",
      "Texture1D, Texture2D, Texture3D, TextureCube // Object สำหรับ Texture",
      "struct // โครงสร้างข้อมูล"
    ],
    "examples (ตัวอย่าง)": [
      "float2 TexCoords; // ค่า Coordinate สำหรับ Texture",
      "float4 finalColor; // สีสุดท้ายของ Pixel",
      "SamplerState mySampler; // Sampler สำหรับ Texture (ส่งมาจาก CPU)",
      "Texture2D myTexture; // Texture object (ส่งมาจาก CPU)",
      "float shininess = 32.0f; // ตัวแปร float (มี 'f' ต่อท้ายสำหรับ literal)",
      "float3 lightPos = float3(1.0f, 1.0f, 1.0f); // Vector 3 มิติสำหรับตำแหน่งแสง"
    ]
  },
  "functions": {
    "declaration (การเขียน Shader)": [
      "VS_OUTPUT MyVertexShader(VS_INPUT input) { /* ... */ } // Vertex Shader Function",
      "float4 MyPixelShader(PS_INPUT input) : SV_Target { /* ... */ } // Pixel (Fragment) Shader Function"
    ],
    "examples (ตัวอย่าง)": [
      "// Vertex Shader (คำนวณตำแหน่งของ Vertex)\\nstruct VS_INPUT {\\n    float3 position : POSITION;\\n    float3 color    : COLOR;\\n};\\n\\nstruct VS_OUTPUT {\\n    float4 position : SV_POSITION;\\n    float3 color    : COLOR;\\n};\\n\\ncbuffer PerFrame : register(b0) {\\n    float4x4 WorldViewProjection;\\n};\\n\\nVS_OUTPUT MyVertexShader(VS_INPUT input)\\n{\\n    VS_OUTPUT output;\\n    output.position = mul(float4(input.position, 1.0f), WorldViewProjection);\\n    output.color = input.color;\\n    return output;\\n}\\n",
      "// Pixel Shader (คำนวณสีของ Pixel)\\nstruct PS_INPUT {\\n    float4 position : SV_POSITION;\\n    float3 color    : COLOR;\\n};\\n\\nfloat4 MyPixelShader(PS_INPUT input) : SV_Target\\n{\n    return float4(input.color, 1.0f);\n}\\n",
      "// ฟังก์ชันที่ผู้ใช้กำหนด (User-defined Function)\\nfloat CalculateDistance(float3 p1, float3 p2)\\n{\\n    return distance(p1, p2); // ใช้ built-in function distance\\n}\\n\\nfloat3 ApplyLighting(float3 surfaceColor, float3 lightDirection, float3 normal)\\n{\n    float diff = max(dot(normal, lightDirection), 0.0f);\n    return surfaceColor * diff;\n}\n"
    ],
    "built_in (ในตัว)": [
      "SV_POSITION // Output จาก Vertex Shader (ตำแหน่งสุดท้ายของ Vertex)",
      "SV_Target // Output จาก Pixel Shader (สีของ Pixel)",
      "POSITION, NORMAL, TEXCOORD, COLOR // Semantics สำหรับ Input/Output registers",
      "mul() // คูณ Matrix/Vector",
      "dot() // Dot Product ของ Vector",
      "cross() // Cross Product ของ Vector (สำหรับ float3)",
      "normalize() // ทำให้ Vector มีความยาวเท่ากับ 1",
      "distance() // คำนวณระยะห่างระหว่างจุดสองจุด",
      "lerp() // Linear Interpolation (ผสมค่าสองค่า)",
      "clamp() // จำกัดค่าให้อยู่ในช่วงที่กำหนด",
      "sin(), cos(), tan() // ฟังก์ชันตรีโกณมิติ",
      "saturate() // จำกัดค่าให้อยู่ในช่วง 0.0 ถึง 1.0",
      "tex2D(), Sample() // ใช้ดึงค่าสีจาก Texture (ขึ้นอยู่กับเวอร์ชัน HLSL)"
    ]
  },
  "syntax": {
    "comments (คอมเมนต์)": [
      "// Single line comment // คอมเมนต์บรรทัดเดียว",
      "/* Multi-line\n   comment */ // คอมเมนต์หลายบรรทัด"
    ],
    "conditions (เงื่อนไข)": [
      "if (condition) { /* ... */ } else if (condition) { /* ... */ } else { /* ... */ } // คำสั่ง if-else if-else"
    ],
    "loops (การวนซ้ำ)": [
      "for (int i = 0; i < 5; i++) { /* ... */ } // ลูป for",
      "while (condition) { /* ... */ } // ลูป while"
    ],
    "operators (ตัวดำเนินการ)": [
      "Arithmetic: +, -, *, /, % // ตัวดำเนินการทางคณิตศาสตร์",
      "Assignment: =, +=, -=, *=, /=, %= // ตัวดำเนินการกำหนดค่า",
      "Comparison: ==, !=, >, <, >=, <= // ตัวดำเนินการเปรียบเทียบ",
      "Logical: && (AND), || (OR), ! (NOT) // ตัวดำเนินการตรรกะ",
      ". (swizzling) // Swizzling (เช่น float4.rgba, float2.xy)"
    ],
    "examples (ตัวอย่าง)": [
      "// ตัวอย่างที่ 1: การใช้เงื่อนไข (if-else) ใน Pixel Shader\\nfloat4 MyConditionalPixelShader(float4 color : COLOR) : SV_Target\\n{\\n    if (color.r > 0.5f) {\\n        return float4(1.0f, 0.0f, 0.0f, 1.0f); // สีแดงถ้าค่า R เกิน 0.5\\n    } else {\\n        return color; // ใช้สีเดิม\\n    }\\n}\\n",
      "// ตัวอย่างที่ 2: การใช้วงลูป for ใน Pixel Shader (เช่น สำหรับ Blur Effect)\\nTexture2D myTexture;\\nSamplerState mySampler;\\n\\nfloat4 MyBlurPixelShader(float2 texCoord : TEXCOORD) : SV_Target\\n{\\n    float4 sum = 0;\\n    float blurSize = 1.0f / 1024.0f; // ขนาดของ Pixel ที่จะ Blur\\n    for (int x = -1; x <= 1; x++) {\\n        for (int y = -1; y <= 1; y++) {\\n            sum += myTexture.Sample(mySampler, texCoord + float2(x * blurSize, y * blurSize));\\n        }\\n    }\\n    return sum / 9.0f;\\n}\\n",
      "// ตัวอย่างที่ 3: การใช้ Swizzling และ Vector Operations\\nfloat4 myVector = float4(1.0f, 2.0f, 3.0f, 4.0f);\\nfloat2 xy = myVector.xy; // xy = (1.0f, 2.0f)\\nfloat3 rgb = myVector.rgb; // rgb = (1.0f, 2.0f, 3.0f)\\nfloat4 rearranged = myVector.yxwz; // rearranged = (2.0f, 1.0f, 4.0f, 3.0f)\\n\\nfloat3 A = float3(1.0f, 0.0f, 0.0f);\\nfloat3 B = float3(0.0f, 1.0f, 0.0f);\\nfloat dot_product = dot(A, B); // dot_product = 0.0f\\nfloat3 cross_product = cross(A, B); // cross_product = (0.0f, 0.0f, 1.0f)\\n"
    ]
  }
}
