{
  "id": 52,
  "name": "SystemVerilog",
  "slug": "systemverilog",
  "logo": "img/systemverilog.png",
  "desc": "SystemVerilog เป็นส่วนขยายที่ทรงพลังของ Verilog Hardware Description Language (HDL) ที่เพิ่มความสามารถด้าน Hardware Description, Hardware Verification และ Software-like Programming เข้าไปในภาษาเดียว ทำให้เป็นภาษามาตรฐานสำหรับงานออกแบบและตรวจสอบวงจรดิจิทัลที่ซับซ้อนในระดับสูง (SoC)",
  "by": "Accellera, IEEE",
  "yr": "2002 (Accellera), 2005 (IEEE 1800-2005)",
  "level": "1",
  "par": ["Declarative", "Concurrent", "Structured", "Object-Oriented", "Constraint-Random"],
  "fields": ["Embedded", "Hardware", "Digital"],
  "rank": "1 ใน HDL และ Verification (ใช้มากที่สุดในอุตสาหกรรม)",
  "salary_range": "฿50,000-90,000 บาท/เดือน (Junior), ฿90,000-180,000 บาท/เดือน (Senior)",
  "salary": ["high", "veryhigh"],
  "pros": [
    "ความสามารถในการ Verify Hardware ที่ทรงพลัง (Assertion, Coverage)",
    "รองรับ Object-Oriented Programming (OOP) สำหรับ Testbench",
    "Randomization และ Constraint Solving ในตัว",
    "สามารถเขียน Testbench ที่นำกลับมาใช้ใหม่ได้ง่าย (Reusability)",
    "เป็นภาษามาตรฐานในอุตสาหกรรมการออกแบบชิป"
  ],
  "cons": [
    "Learning Curve สูงมาก (ต้องเข้าใจทั้ง Hardware และ Software)",
    "Syntax ที่ซับซ้อนและมีคุณสมบัติเยอะมาก",
    "เครื่องมือเฉพาะทาง (EDA Tools) มีราคาแพง",
    "การดีบักซับซ้อนและใช้เวลานาน",
    "เวลาในการสังเคราะห์และรันบน Hardware อาจนานมากสำหรับโปรเจกต์ขนาดใหญ่"
  ],
  "frameworks": ["UVM (Universal Verification Methodology)"],
  "learn": ["SystemVerilog for Verification (book)", "Verification Academy", "IEEE 1800 Standard", "DVCon Papers"],
  "variables": {
    "declaration (การประกาศ)": [
      "logic my_signal; // ประกาศ logic (แทน wire/reg, ยืดหยุ่นกว่า)",
      "int my_integer = 10; // ประกาศ integer (สำหรับ Verification)",
      "bit [7:0] data_bus; // ประกาศ bit vector ขนาด 8 บิต",
      "enum {STATE_IDLE, STATE_ACTIVE} current_state; // ประกาศ Enumerated Type",
      "class MyObject; // ประกาศ Class (สำหรับ OOP)"
    ],
    "types (ประเภท)": [
      "logic // ใช้แทน wire/reg, ยืดหยุ่นกว่า (4-state logic)",
      "bit // 2-state logic (0, 1) เหมาะสำหรับ Verification",
      "byte, shortint, int, longint // Signed Integers ขนาดต่างๆ",
      "time, real, realtime // เวลาและทศนิยม (สำหรับ Simulation)",
      "string // สตริง",
      "enum // Enumerated Type",
      "struct // Structure (รวมข้อมูลหลายประเภทเข้าด้วยกัน)",
      "union // Union (เก็บข้อมูลหลายประเภทในหน่วยความจำเดียวกัน)",
      "class // Class (สำหรับ OOP)",
      "interface // Interface (สำหรับการเชื่อมต่อ Module/Testbench)",
      "mailbox // Mailbox (สำหรับการสื่อสารระหว่าง Processes)"
    ],
    "examples (ตัวอย่าง)": [
      "logic [15:0] address; // ประกาศ logic vector ขนาด 16 บิต",
      "int counter = 0; // ประกาศตัวแปร int สำหรับนับ",
      "string user_msg = \"SystemVerilog\"; // ประกาศสตริง",
      "typedef struct packed { logic [7:0] opcode; logic [23:0] address; } Instruction; // กำหนด Struct Type\nInstruction my_instr; // ประกาศตัวแปรจาก Struct Type",
      "class Transaction; // การประกาศคลาสสำหรับเก็บข้อมูล Transaction\n  rand int id;\n  rand logic [7:0] data;\nendclass"
    ]
  },
  "functions": {
    "declaration (การออกแบบ Hardware และ Verification)": [
      "module Module_Name (port_list); // การประกาศ Module (สำหรับ Hardware)",
      "program Program_Name; // การประกาศ Program (สำหรับ Testbench Top-level)",
      "function int my_function (input int a); // การประกาศ Function (มีค่าคืนกลับ)",
      "task my_task (input int data); // การประกาศ Task (ไม่มีค่าคืนกลับ, สามารถหน่วงเวลาได้)",
      "initial begin // Initial Block (สำหรับ Simulation Initialization)",
      "always_ff @(posedge clk or negedge reset) begin // Always FF Block (สำหรับ Sequential Logic)",
      "always_comb begin // Always Comb Block (สำหรับ Combinational Logic)"
    ],
    "examples (ตัวอย่าง)": [
      "// Module: Full Adder (วงจรบวกเต็ม)\nmodule full_adder (input a, b, cin, output sum, cout);\n  logic s1, c1, c2;\n  assign s1 = a ^ b;\n  assign c1 = a & b;\n  assign sum = s1 ^ cin;\n  assign cout = c1 | (s1 & cin);\nendmodule\n",
      "// Task: Write Data (สำหรับ Testbench)\ntask write_data (input logic [7:0] addr, input logic [7:0] data);\n  #10; // หน่วงเวลา 10 units\n  // Code to drive data to DUT\n  $display(\"Writing %h to address %h\", data, addr);\n  #5; // หน่วงเวลา 5 units\nendtask\n",
      "// Function: Calculate Parity (สำหรับ Design หรือ Testbench)\nfunction automatic bit calculate_parity (input bit [7:0] in_data);\n  bit parity = 0;\n  for (int i = 0; i < 8; i++) begin\n    parity = parity ^ in_data[i];\n  end\n  return parity;\nendfunction\n",
      "// Class: Scoreboard (สำหรับ Verification)\nclass Scoreboard;\n  Transaction expected_queue[$]; // Queue of expected transactions\n  Transaction actual_queue[$]; // Queue of actual transactions\n\n  function new();\n    expected_queue = new;\n    actual_queue = new;\n  endfunction\n\n  function void compare();\n    if (expected_queue.size() != actual_queue.size()) begin\n      $error(\"Queue size mismatch: Expected %0d, Actual %0d\", expected_queue.size(), actual_queue.size());\n    end else begin\n      // Detailed comparison logic here\n      $info(\"All transactions matched!\");\n    end\n  endfunction\nendclass\n"
    ],
    "built_in (ในตัว)": [
      "assign // ใช้กำหนดค่าแบบ Combinational Logic (Continuous Assignment)",
      "always_ff // Always Block สำหรับ Sequential Logic (Synchronous Logic)",
      "always_comb // Always Block สำหรับ Combinational Logic",
      "always_latch // Always Block สำหรับ Latch Logic",
      "initial // Initial Block (สำหรับการจำลอง)",
      "final // Final Block (สำหรับสรุปผลการจำลอง)",
      "$display // ใช้แสดงผลข้อความและค่าตัวแปรใน Simulation Console",
      "$monitor // ใช้แสดงผลค่าตัวแปรเมื่อมีการเปลี่ยนแปลงใน Simulation Console",
      "$time // ฟังก์ชันสำหรับเรียกดูเวลาใน Simulation",
      "$finish // ใช้หยุด Simulation",
      "$error // ใช้แสดง Error Message ใน Simulation",
      "$warning // ใช้แสดง Warning Message ใน Simulation",
      "$info // ใช้แสดง Information Message ใน Simulation",
      "assert // ใช้สำหรับ Hardware Assertion (ตรวจสอบคุณสมบัติ)",
      "cover // ใช้สำหรับ Functional Coverage (ตรวจสอบความครอบคลุมของการทดสอบ)",
      "rand // Property สำหรับ Randomization",
      "constraint // ใช้กำหนดข้อจำกัดในการ Randomization"
    ]
  },
  "syntax": {
    "comments (คอมเมนต์)": [
      "// Single-line comment // คอมเมนต์บรรทัดเดียว",
      "/* Multi-line comment */ // คอมเมนต์หลายบรรทัด"
    ],
    "conditions (เงื่อนไข)": [
      "if (condition) begin /* ... */ end else if (condition) begin /* ... */ end else begin /* ... */ end // คำสั่ง if-else if-else",
      "case (expression) case_value: /* ... */ default: /* ... */ endcase // คำสั่ง case",
      "unique case (expression) ... endcase // Unique Case (ตรวจสอบว่ามีเพียง Case เดียวที่ตรงกัน)",
      "priority case (expression) ... endcase // Priority Case (ใช้ Case แรกที่ตรงกัน)"
    ],
    "loops (การวนซ้ำ)": [
      "for (int i = 0; i < 5; i++) begin /* ... */ end // ลูป for",
      "while (condition) begin /* ... */ end // ลูป while",
      "repeat (N) begin /* ... */ end // ลูป repeat (วนซ้ำ N ครั้ง)",
      "forever begin /* ... */ end // ลูปไม่รู้จบ (สำหรับสร้าง Clock/Reset ใน Testbench)",
      "foreach (array_name[index]) begin /* ... */ end // ลูป foreach สำหรับวนซ้ำ Array"
    ],
    "operators (ตัวดำเนินการ)": [
      "Arithmetic: +, -, *, /, % // ตัวดำเนินการทางคณิตศาสตร์",
      "Logical: && (AND), || (OR), ! (NOT) // ตัวดำเนินการตรรกะ",
      "Bitwise: & (AND), | (OR), ^ (XOR), ~ (NOT) // ตัวดำเนินการระดับบิต",
      "Reduction: & (Reduction AND), | (Reduction OR), ^ (Reduction XOR) // ตัวดำเนินการลดบิต",
      "Shift: << (Left Shift), >> (Right Shift) // ตัวดำเนินการ Shift",
      "Concatenation: {a, b} // ตัวดำเนินการเชื่อมต่อบิต/เวกเตอร์",
      "Replication: {N{a}} // ตัวดำเนินการทำซ้ำบิต/เวกเตอร์ N ครั้ง",
      "Blocking Assignment: = // การกำหนดค่าแบบ Blocking (Sequential Execution)",
      "Non-blocking Assignment: <= // การกำหนดค่าแบบ Non-blocking (Concurrent Execution, ใช้สำหรับ Sequential Logic)",
      "Increment/Decrement: ++, -- // ตัวดำเนินการเพิ่ม/ลดค่า (สำหรับ Variable)",
      "Equality/Inequality: ==, !=, ===, !== // เปรียบเทียบ (2-state/4-state)"
    ],
    "examples (ตัวอย่าง)": [
      "// ตัวอย่างที่ 1: การใช้ If-Else ใน Always_Comb (Combinational Logic)\nmodule priority_encoder (input [2:0] in_vec, output logic [1:0] out_enc, output logic valid);\n  always_comb begin\n    valid = 1'b1;\n    case (in_vec)\n      3'b100: out_enc = 2'b00; // if in_vec[2] is 1\n      3'b010: out_enc = 2'b01; // if in_vec[1] is 1\n      3'b001: out_enc = 2'b10; // if in_vec[0] is 1\n      default: begin\n        out_enc = 2'b00; // Or 2'bxx\n        valid = 1'b0;\n      end\n    endcase\n  end\nendmodule\n",
      "// ตัวอย่างที่ 2: การใช้วงลูป For และ Foreach ใน Testbench\nprogram test;\n  initial begin\n    int data_array [5] = '{10, 20, 30, 40, 50};\n    $display(\"--- For Loop ---\");\n    for (int i = 0; i < data_array.size(); i++) begin\n      $display(\"Element at %0d: %0d\", i, data_array[i]);\n    end\n    $display(\"--- Foreach Loop ---\");\n    foreach (data_array[idx]) begin\n      $display(\"Element at %0d: %0d\", idx, data_array[idx]);\n    end\n    $finish;\n  end\nendprogram\n",
      "// ตัวอย่างที่ 3: การใช้ Assertions (สำหรับตรวจสอบคุณสมบัติ)\nmodule dut (input clk, input reset, input data_in, output logic data_out);\n  // Basic design logic\n  always_ff @(posedge clk or posedge reset) begin\n    if (reset) data_out <= 1'b0;\n    else data_out <= data_in;\n  end\n\n  // Assertion: data_out should always be 0 if reset is active\n  // property reset_assert;\n  //   @(posedge clk) reset |-> (data_out == 1'b0);\n  // endproperty\n  // assert property (reset_assert) $info(\"Reset assertion passed\");\n\n  // Assertion: data_out should follow data_in after 1 clock cycle when not reset\n  // property data_flow_assert;\n  //   @(posedge clk) (!reset && $fell(data_in)) |-> ##1 (!data_out);\n  // endproperty\n  // assert property (data_flow_assert) $info(\"Data flow assertion passed\");\nendmodule\n",
      "// ตัวอย่างที่ 4: การใช้งาน Randomization และ Constraints ใน Class\nclass Configuration;\n  rand int num_packets;\n  rand int packet_size;\n\n  constraint c_num_packets {\n    num_packets inside {[1:10]};\n  }\n  constraint c_packet_size {\n    packet_size inside {[64:256]};\n    packet_size % 4 == 0; // ต้องเป็นผลคูณของ 4\n  }\n\n  function void print_config();\n    $display(\"Generated Config: Num Packets = %0d, Packet Size = %0d\", num_packets, packet_size);\n  endfunction\nendclass\n\nprogram test_randomization;\n  initial begin\n    Configuration cfg = new();\n    if (cfg.randomize()) begin\n      cfg.print_config();\n    end else begin\n      $error(\"Failed to randomize configuration!\");\n    end\n    // สามารถ override constraint ได้ขณะ randomize\n    if (cfg.randomize() with { num_packets == 20; packet_size > 100; }) begin\n      cfg.print_config();\n    end\n    $finish;\n  end\nendprogram\n",
      "// ตัวอย่างที่ 5: การใช้งาน Interface เพื่อเชื่อมต่อ Design และ Testbench\ninterface axi_bus_if (\n  input logic clk,\n  input logic reset\n);\n  logic [31:0] awaddr;\n  logic [31:0] wdata;\n  logic        wvalid;\n  // ... other signals\n\n  modport master (\n    output awaddr,\n    output wdata,\n    output wvalid,\n    input  clk,\n    input  reset\n  );\n\n  modport slave (\n    input  awaddr,\n    input  wdata,\n    input  wvalid,\n    input  clk,\n    input  reset\n  );\nendinterface\n\n// การใช้งานใน Module (Design)\n// module my_controller (\n//   axi_bus_if.slave s_axi // s_axi เป็น instance ของ interface\n// );\n//   // Access signals: s_axi.awaddr, s_axi.wdata, etc.\n// endmodule\n\n// การใช้งานใน Testbench\n// program my_test_program;\n//   axi_bus_if axi_inst ( .clk(test_clk), .reset(test_reset) );\n//   // Drive signals: axi_inst.master.awaddr = ...\n// endprogram\n"
    ]
  }
}
